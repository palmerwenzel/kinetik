rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidVideo() {
      // Check file type
      let contentType = request.resource.contentType;
      let isVideoType = contentType.matches('video/.*');
      
      // Max file size (100MB)
      let maxSize = 100 * 1024 * 1024;
      let withinSizeLimit = request.resource.size <= maxSize;

      return isVideoType && withinSizeLimit;
    }

    function isValidThumbnail() {
      // Check file type
      let contentType = request.resource.contentType;
      let isImageType = contentType.matches('image/.*');
      
      // Max file size (5MB)
      let maxSize = 5 * 1024 * 1024;
      let withinSizeLimit = request.resource.size <= maxSize;

      return isImageType && withinSizeLimit;
    }

    // Video upload rules
    match /videos/{userId}/{videoId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow write if user owns the path and file is valid
      allow write: if isOwner(userId) && isValidVideo();
    }

    // Thumbnail upload rules
    match /thumbnails/{userId}/{thumbnailId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow write if user owns the path and file is valid
      allow write: if isOwner(userId) && isValidThumbnail();
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 