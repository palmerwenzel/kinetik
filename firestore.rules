rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isGroupMember(groupData) {
      return isAuthenticated() && (request.auth.uid in groupData.memberRoles);
    }

    function isGroupAdmin(groupData) {
      return isAuthenticated() && 
        (request.auth.uid in groupData.memberRoles) && 
        groupData.memberRoles[request.auth.uid] == "admin";
    }

    function isValidUserData() {
      let incomingData = request.resource.data;
      return 
        incomingData.keys().hasAll(['firstName', 'lastName', 'email']) &&
        incomingData.firstName is string &&
        incomingData.firstName.size() >= 1 &&
        incomingData.lastName is string &&
        incomingData.lastName.size() >= 1 &&
        incomingData.email is string &&
        incomingData.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidProfileUpdate() {
      let incomingData = request.resource.data;
      return 
        incomingData.diff(resource.data).affectedKeys()
          .hasAny([
            'firstName', 'lastName', 'photoURL', 
            'interests', 'isProfileComplete', 'updatedAt'
          ]);
    }

    function isValidGroupData() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'name', 'visibility', 'membership', 'postingGoal', 
        'createdBy', 'createdAt', 'updatedAt', 'memberRoles',
        'memberCount', 'isActive'
      ]);
    }

    // User profiles
    match /users/{userId} {
      // Basic read rules - anyone can read basic profile info
      allow read: if true;
      
      // Only owner can create their profile
      allow create: if isOwner(userId);
      
      // Only owner can update their profile with valid changes
      allow update: if isOwner(userId) && isValidProfileUpdate();
      
      // Only owner can delete their profile
      allow delete: if isOwner(userId);
    }

    // User interests (subcollection)
    match /users/{userId}/interests/{interestId} {
      allow read: if resource.data.privacySettings.isPublic == true || isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Groups collection
    match /groups/{groupId} {
      // Read rules
      allow read: if 
        // Public groups can be read by anyone
        (resource.data.visibility == 'public') ||
        // Private groups can only be read by members
        (resource.data.visibility == 'private' && isGroupMember(resource.data));

      // Create rules
      allow create: if 
        isAuthenticated() && 
        isValidGroupData() && 
        request.resource.data.createdBy == request.auth.uid;

      // Update rules
      allow update: if isGroupAdmin(resource.data);

      // Delete rules
      allow delete: if isGroupAdmin(resource.data);

      // Members subcollection
      match /members/{memberId} {
        allow read: if isGroupMember(get(/databases/$(database)/documents/groups/$(groupId)).data);
        allow create: if 
          isAuthenticated() && 
          // Only admins can add members directly
          isGroupAdmin(get(/databases/$(database)/documents/groups/$(groupId)).data) ||
          // Or if the group is "open" and someone is adding themselves
          (
            get(/databases/$(database)/documents/groups/$(groupId)).data.membership == "open" &&
            request.resource.data.uid == request.auth.uid
          );
        allow update, delete: if isGroupAdmin(get(/databases/$(database)/documents/groups/$(groupId)).data);
      }
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 