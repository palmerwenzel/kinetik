rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUserData() {
      let incomingData = request.resource.data;
      return 
        incomingData.keys().hasAll(['firstName', 'lastName', 'email']) &&
        incomingData.firstName is string &&
        incomingData.firstName.size() >= 1 &&
        incomingData.lastName is string &&
        incomingData.lastName.size() >= 1 &&
        incomingData.email is string &&
        incomingData.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidProfileUpdate() {
      let incomingData = request.resource.data;
      return 
        incomingData.diff(resource.data).affectedKeys()
          .hasAny([
            'firstName', 'lastName', 'photoURL', 
            'interests', 'isProfileComplete', 'updatedAt'
          ]);
    }

    // User profiles
    match /users/{userId} {
      // Basic read rules - anyone can read basic profile info
      allow read: if true;
      
      // Only owner can create their profile
      allow create: if isOwner(userId);
      
      // Only owner can update their profile with valid changes
      allow update: if isOwner(userId) && isValidProfileUpdate();
      
      // Only owner can delete their profile
      allow delete: if isOwner(userId);
    }

    // User interests (subcollection)
    match /users/{userId}/interests/{interestId} {
      allow read: if resource.data.privacySettings.isPublic == true || isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 