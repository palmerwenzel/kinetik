rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasGroupAccess(groupData) {
      let uid = request.auth.uid;
      let roles = groupData.memberRoles;
      return isAuthenticated() && (uid in roles);
    }

    function isGroupAdmin(groupData) {
      let uid = request.auth.uid;
      let roles = groupData.memberRoles;
      return isAuthenticated() && 
        (uid in roles) && 
        roles[uid] == "admin";
    }

    function isValidUserData() {
      let incomingData = request.resource.data;
      return 
        incomingData.keys().hasAll(['firstName', 'lastName', 'email']) &&
        incomingData.firstName is string &&
        incomingData.firstName.size() >= 1 &&
        incomingData.lastName is string &&
        incomingData.lastName.size() >= 1 &&
        incomingData.email is string &&
        incomingData.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidProfileUpdate() {
      let incomingData = request.resource.data;
      return 
        incomingData.diff(resource.data).affectedKeys()
          .hasAny([
            'firstName', 'lastName', 'photoURL', 
            'interests', 'isProfileComplete', 'updatedAt'
          ]);
    }

    function isValidGroupData() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'name', 'visibility', 'membership', 'postingGoal', 
        'createdBy', 'createdAt', 'updatedAt', 'memberRoles',
        'memberCount', 'isActive'
      ]);
    }

    // Check if user has access to a video based on group membership
    function hasVideoAccess(videoData) {
      // Creator always has access
      let isCreator = videoData.createdBy == request.auth.uid;
      
      // Check if user is member of any groups the video is shared to
      let groupIds = videoData.groups;
      let isMemberOfSharedGroup = groupIds.size() == 0 || 
        exists(/databases/$(database)/documents/groups/$(groupIds[0])) && 
        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupIds[0])).data.memberRoles;
      
      return isAuthenticated() && (isCreator || isMemberOfSharedGroup);
    }

    // Video validation
    function isValidVideo() {
      let video = request.resource.data;
      return video.keys().hasAll([
        'caption', 'interests', 'groups', 'videoUrl', 'thumbnailUrl',
        'duration', 'size', 'createdBy', 'createdAt', 'updatedAt',
        'likes', 'comments', 'shares', 'isActive', 'isProcessed'
      ]) &&
      video.caption is string &&
      video.caption.size() <= 100 &&
      video.interests is list &&
      video.interests.size() > 0 &&
      video.groups is list &&
      video.videoUrl is string &&
      video.thumbnailUrl is string &&
      video.duration is number &&
      video.size is number &&
      video.createdBy == request.auth.uid &&
      video.likes is number &&
      video.comments is number &&
      video.shares is number &&
      video.isActive is bool &&
      video.isProcessed is bool;
    }

    function isValidVideoUpdate() {
      let video = request.resource.data;
      let changes = video.diff(resource.data).affectedKeys();
      return changes.hasAny(['caption', 'interests', 'groups', 'isActive', 'likes', 'comments', 'shares', 'updatedAt']) &&
        (
          (isOwner(resource.data.createdBy) &&
           !changes.hasAny(['videoUrl', 'thumbnailUrl', 'createdBy', 'createdAt'])) ||
          changes.hasOnly(['likes', 'comments', 'shares', 'updatedAt'])
        );
    }

    // Video comment validation
    function isValidVideoComment() {
      let comment = request.resource.data;
      let videoDoc = get(/databases/$(database)/documents/videos/$(comment.videoId));
      
      return comment.keys().hasAll([
        'videoId', 'text', 'createdBy', 'createdAt', 'likes', 'isActive'
      ]) &&
      comment.text is string &&
      comment.text.size() > 0 &&
      comment.text.size() <= 500 &&
      comment.createdBy == request.auth.uid &&
      comment.likes is number &&
      comment.isActive is bool &&
      // Ensure parent video exists and user has access
      videoDoc != null && 
      hasVideoAccess(videoDoc.data);
    }

    // Video like validation
    function isValidVideoLike() {
      let like = request.resource.data;
      let videoDoc = get(/databases/$(database)/documents/videos/$(like.videoId));
      
      return like.keys().hasAll([
        'videoId', 'userId', 'createdAt'
      ]) &&
      like.userId == request.auth.uid &&
      // Ensure parent video exists and user has access
      videoDoc != null && 
      hasVideoAccess(videoDoc.data);
    }

    // User profiles
    match /users/{userId} {
      // Basic read rules - anyone can read basic profile info
      allow read: if true;
      
      // Only owner can create their profile
      allow create: if isOwner(userId);
      
      // Only owner can update their profile with valid changes
      allow update: if isOwner(userId) && isValidProfileUpdate();
      
      // Only owner can delete their profile
      allow delete: if isOwner(userId);
    }

    // User interests (subcollection)
    match /users/{userId}/interests/{interestId} {
      allow read: if resource.data.privacySettings.isPublic == true || isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Groups collection
    match /groups/{groupId} {
      // Read rules - user can read any group where they have any role
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.memberRoles);

      // Create rules
      allow create: if 
        isAuthenticated() && 
        isValidGroupData() && 
        request.resource.data.createdBy == request.auth.uid;

      // Update rules
      allow update: if isGroupAdmin(resource.data);

      // Delete rules
      allow delete: if isGroupAdmin(resource.data);

      // Members subcollection
      match /members/{memberId} {
        allow read: if hasGroupAccess(get(/databases/$(database)/documents/groups/$(groupId)).data);
        allow create: if 
          isAuthenticated() && 
          // Only admins can add members directly
          isGroupAdmin(get(/databases/$(database)/documents/groups/$(groupId)).data) ||
          // Or if the group is "open" and someone is adding themselves
          (
            get(/databases/$(database)/documents/groups/$(groupId)).data.membership == "open" &&
            request.resource.data.uid == request.auth.uid
          );
        allow update, delete: if isGroupAdmin(get(/databases/$(database)/documents/groups/$(groupId)).data);
      }
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidVideo();
      allow update: if isAuthenticated() && isValidVideoUpdate();
      allow delete: if isOwner(resource.data.createdBy);

      // Video comments
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
        allow update: if isOwner(resource.data.createdBy);
        allow delete: if isOwner(resource.data.createdBy);
      }

      // Video likes
      match /likes/{userId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && userId == request.auth.uid;
        allow delete: if isOwner(userId);
      }
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 