rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasGroupAccess(groupId) {
      let memberDoc = get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
      return isAuthenticated() && memberDoc != null;
    }

    function isGroupAdmin(groupId) {
      let memberDoc = get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
      return isAuthenticated() && memberDoc != null && memberDoc.data.role == "admin";
    }

    function isValidUserData() {
      let incomingData = request.resource.data;
      return 
        // Make email and username optional during initial creation
        incomingData.keys().hasAny(['firstName', 'lastName', 'email', 'username']) &&
        (
          !('firstName' in incomingData) || (
            incomingData.firstName is string &&
            incomingData.firstName.size() >= 1
          )
        ) &&
        (
          !('lastName' in incomingData) || (
            incomingData.lastName is string &&
            incomingData.lastName.size() >= 1
          )
        ) &&
        (
          !('email' in incomingData) || (
            incomingData.email is string &&
            incomingData.email.matches('^[^@]+@[^@]+\\.[^@]+$')
          )
        ) &&
        (
          !('username' in incomingData) || (
            incomingData.username is string &&
            incomingData.username.size() >= 3 &&
            incomingData.username.size() <= 30 &&
            incomingData.username.matches('^[a-zA-Z0-9_]+$')
          )
        );
    }

    function isValidProfileUpdate() {
      let incomingData = request.resource.data;
      let existingData = resource.data;
      return 
        // Allow any updates to these fields
        incomingData.diff(existingData).affectedKeys()
          .hasAny([
            'firstName', 'lastName', 'photoURL', 
            'interests', 'isProfileComplete', 'updatedAt',
            'username', 'email', 'displayName', 'createdAt'
          ]) &&
        // Validate username if it's being updated
        (
          !('username' in incomingData) || (
            incomingData.username is string &&
            incomingData.username.size() >= 3 &&
            incomingData.username.size() <= 30 &&
            incomingData.username.matches('^[a-zA-Z0-9_]+$')
          )
        );
    }

    function isValidGroupData() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'name', 'visibility', 'membership', 'postingGoal', 
        'createdBy', 'createdAt', 'updatedAt',
        'memberCount', 'isActive'
      ]);
    }

    // Check if user has access to a video based on group membership
    function hasVideoAccess(videoData) {
      // Creator always has access
      let isCreator = videoData.createdBy == request.auth.uid;
      
      // Check if user is member of any groups the video is shared to
      let groupIds = videoData.groups;
      let isMemberOfSharedGroup = groupIds.size() == 0 || 
        exists(/databases/$(database)/documents/groups/$(groupIds[0])/members/$(request.auth.uid));
      
      return isAuthenticated() && (isCreator || isMemberOfSharedGroup);
    }

    // Video validation
    function isValidVideo() {
      let video = request.resource.data;
      return video.keys().hasAll([
        'caption', 'interests', 'groups', 'videoUrl', 'thumbnailUrl',
        'duration', 'size', 'createdBy', 'createdAt', 'updatedAt',
        'likes', 'comments', 'shares', 'isActive', 'isProcessed'
      ]) &&
      video.caption is string &&
      video.caption.size() <= 100 &&
      video.interests is list &&
      video.interests.size() > 0 &&
      video.groups is list &&
      video.videoUrl is string &&
      video.thumbnailUrl is string &&
      video.duration is number &&
      video.size is number &&
      video.createdBy == request.auth.uid &&
      video.likes is number &&
      video.comments is number &&
      video.shares is number &&
      video.isActive is bool &&
      video.isProcessed is bool;
    }

    function isValidVideoUpdate() {
      let video = request.resource.data;
      let changes = video.diff(resource.data).affectedKeys();
      
      // Allow like/comment/share count updates and ensure increment operations are valid
      let isMetricsUpdate = 
        changes.hasOnly(['likes', 'comments', 'shares', 'updatedAt']) &&
        (
          // Allow increment/decrement of metrics
          (request.resource.data.likes is number && resource.data.likes is number) ||
          (request.resource.data.comments is number && resource.data.comments is number) ||
          (request.resource.data.shares is number && resource.data.shares is number)
        );
      
      // Allow owner to update content
      let isOwnerUpdate = isOwner(resource.data.createdBy) && 
        changes.hasAny(['caption', 'interests', 'groups', 'isActive']) &&
        !changes.hasAny(['videoUrl', 'thumbnailUrl', 'createdBy', 'createdAt']);
      
      return isAuthenticated() && (isMetricsUpdate || isOwnerUpdate);
    }

    // Video comment validation
    function isValidVideoComment() {
      let comment = request.resource.data;
      let videoDoc = get(/databases/$(database)/documents/videos/$(comment.videoId));
      
      return comment.keys().hasAll([
        'videoId', 'text', 'createdBy', 'createdAt', 'likes', 'isActive'
      ]) &&
      comment.text is string &&
      comment.text.size() > 0 &&
      comment.text.size() <= 500 &&
      comment.createdBy == request.auth.uid &&
      comment.likes is number &&
      comment.isActive is bool &&
      // Ensure parent video exists and user has access
      videoDoc != null && 
      hasVideoAccess(videoDoc.data);
    }

    // Video like validation
    function isValidLike() {
      let like = request.resource.data;
      let videoDoc = get(/databases/$(database)/documents/videos/$(like.videoId));
      
      return like.keys().hasAll([
        'userId',
        'videoId',
        'createdAt'
      ]) &&
      like.userId == request.auth.uid &&
      like.createdAt is timestamp &&
      // Ensure video exists and user has access
      videoDoc != null && 
      hasVideoAccess(videoDoc.data);
    }

    function isValidUserLikes() {
      let data = request.resource.data;
      let incomingData = request.resource.data;
      let existingData = resource != null ? resource.data : {};
      
      // Allow partial updates
      let updatedFields = incomingData.diff(existingData).affectedKeys();
      
      return (
        // For new documents
        (resource == null && data.keys().hasAll(['likedVideos', 'updatedAt'])) ||
        // For updates
        (resource != null && updatedFields.hasOnly(['likedVideos', 'updatedAt']))
      ) &&
      incomingData.likedVideos is map &&
      incomingData.updatedAt is timestamp;
    }

    // Video views validation
    function isValidVideoViews() {
      let data = request.resource.data;
      return data.keys().hasAll(['viewedVideos', 'lastViewedAt']) &&
        data.viewedVideos is map &&
        data.lastViewedAt is timestamp;
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidVideo();
      allow update: if isAuthenticated() && isValidVideoUpdate();
      allow delete: if isOwner(resource.data.createdBy);

      // Video comments
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
        allow update: if isOwner(resource.data.createdBy);
        allow delete: if isOwner(resource.data.createdBy);
      }
    }

    // Global likes collection
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidLike();
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // User's liked videos collection
    match /userLikes/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId) && isValidUserLikes();
      allow delete: if isOwner(userId);
    }

    // User's video views collection
    match /users/{userId}/videoViews/{docId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId) && isValidVideoViews();
      allow delete: if isOwner(userId);
    }

    // User profiles
    match /users/{userId} {
      // Anyone can read basic profile info
      allow read: if true;
      
      // Allow creation if authenticated and data is valid
      allow create: if isAuthenticated() && 
        (isOwner(userId) || request.auth.uid == userId) && 
        isValidUserData();
      
      // Allow updates if authenticated and changes are valid
      allow update: if isAuthenticated() && 
        (isOwner(userId) || request.auth.uid == userId) && 
        isValidProfileUpdate();
      
      // Only owner can delete their profile
      allow delete: if isOwner(userId);
    }

    // User interests (subcollection)
    match /users/{userId}/interests/{interestId} {
      allow read: if resource.data.privacySettings.isPublic == true || isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Groups collection
    match /groups/{groupId} {
      // Read rules - allow if authenticated and either:
      // 1. The group is public, OR
      // 2. They are a member
      allow read: if isAuthenticated() && (
        resource.data.visibility == 'public' ||
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid))
      );

      // Create rules
      allow create: if 
        isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;

      // Update rules - check member role directly
      allow update: if isAuthenticated() && 
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";

      // Delete rules - admin only
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";

      // Members subcollection
      match /members/{userId} {
        // Allow reading members if authenticated and either:
        // 1. The parent group is public, OR
        // 2. They are a member of the group
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/groups/$(groupId)).data.visibility == 'public' ||
          exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid))
        );
        
        // Allow admins to manage members
        allow write: if isAuthenticated() && 
          exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";
      }

      // Messages subcollection
      match /messages/{messageId} {
        // Allow reading and writing messages if member
        allow read, write: if isAuthenticated() && 
          exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
      }

      // Invites subcollection
      match /invites/{inviteId} {
        // Allow reading invites if authenticated and either:
        // 1. You're a group admin, OR
        // 2. You're a member and the group allows member invites
        allow read: if isAuthenticated() && (
          isGroupAdmin(groupId) ||
          (hasGroupAccess(groupId) && 
           get(/databases/$(database)/documents/groups/$(groupId)).data.settings.allowMemberInvites)
        );
        
        // Allow creating invites with same conditions as read
        allow create: if isAuthenticated() && (
          isGroupAdmin(groupId) ||
          (hasGroupAccess(groupId) && 
           get(/databases/$(database)/documents/groups/$(groupId)).data.settings.allowMemberInvites)
        ) && 
        request.resource.data.keys().hasAll(['code', 'groupId', 'invitedBy', 'maxUses', 'usedCount', 'role', 'createdAt', 'expiresAt', 'isRevoked']) &&
        request.resource.data.invitedBy == request.auth.uid &&
        request.resource.data.groupId == groupId &&
        request.resource.data.usedCount == 0 &&
        request.resource.data.isRevoked == false;
        
        // Only allow updates to usedCount and isRevoked fields
        allow update: if isAuthenticated() && (
          isGroupAdmin(groupId) ||
          (hasGroupAccess(groupId) && 
           get(/databases/$(database)/documents/groups/$(groupId)).data.settings.allowMemberInvites)
        ) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usedCount', 'isRevoked']);
      }

      // Requests subcollection
      match /requests/{requestId} {
        // Allow reading requests if authenticated and either:
        // 1. You're a group admin, OR
        // 2. You're the requester
        allow read: if isAuthenticated() && (
          isGroupAdmin(groupId) ||
          request.auth.uid == resource.data.uid
        );
        
        // Allow creating requests if authenticated and:
        // 1. You're not already a member
        // 2. The group membership is not "closed"
        // 3. You're creating a request for yourself
        allow create: if isAuthenticated() && 
          !exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/groups/$(groupId)).data.membership != "closed" &&
          request.resource.data.keys().hasAll(['uid', 'groupId', 'status', 'createdAt', 'updatedAt', 'username', 'photoURL']) &&
          request.resource.data.uid == request.auth.uid &&
          request.resource.data.groupId == groupId &&
          request.resource.data.status == "pending";
        
        // Only allow admins to update request status
        allow update: if isAuthenticated() &&
          isGroupAdmin(groupId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
      }
    }

    // Allow collection group queries on members subcollection
    match /{path=**}/members/{userId} {
      allow read: if isAuthenticated();
    }

    // Allow collection group queries on invites for validation
    match /{path=**}/invites/{inviteId} {
      allow read: if isAuthenticated();
    }

    // Allow collection group queries on requests for validation
    match /{path=**}/requests/{requestId} {
      allow read: if isAuthenticated();
    }

    // Username uniqueness collection
    match /usernames/{username} {
      allow read: if true;
      // Allow creation if authenticated and username doesn't exist
      allow create: if isAuthenticated() && 
        request.resource.data.uid == request.auth.uid &&
        !exists(/databases/$(database)/documents/usernames/$(username));
      // Allow updates to your own username document
      allow update: if isAuthenticated() && 
        resource.data.uid == request.auth.uid;
      // Allow deletion of your own username
      allow delete: if isAuthenticated() && 
        resource.data.uid == request.auth.uid;
    }

    // Group chat messages
    match /groups/{groupId}/messages/{messageId} {
      // Read rules - user can read messages if authenticated and either:
      // 1. The parent group is public, OR
      // 2. They are a member (verified by querying members collection)
      allow read: if isAuthenticated() && (
        get(/databases/$(database)/documents/groups/$(groupId)).data.visibility == 'public' ||
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid))
      );

      // Create rules - same conditions as read, plus message validation
      allow create: if isAuthenticated() && (
        get(/databases/$(database)/documents/groups/$(groupId)).data.visibility == 'public' ||
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid))
      ) && 
        request.resource.data.keys().hasAll(['text', 'userId', 'username', 'createdAt']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.text is string &&
        request.resource.data.text.size() > 0 &&
        request.resource.data.text.size() <= 1000;

      // Messages cannot be edited
      allow update: if false;

      // Delete rules - only group admins or message creator can delete
      allow delete: if isAuthenticated() && (
        isGroupAdmin(groupId) || 
        (
          exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
          resource.data.userId == request.auth.uid
        )
      );
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 